import pandas as pd
from backtest_strategy import get_trade_signal
from backtest_utils import fetch_klines, calculate_atr, apply_fees
from datetime import datetime, timedelta
import csv

START_DATE = input("ËØ∑ËæìÂÖ•ÂõûÊµãÂºÄÂßãÊó•ÊúüÔºàYYYY-MM-DDÔºâÔºö")
END_DATE = input("ËØ∑ËæìÂÖ•ÂõûÊµãÁªìÊùüÊó•ÊúüÔºàYYYY-MM-DDÔºâÔºö")

symbols = ["BTC-USDT-SWAP", "TRUMP-USDT-SWAP"]
timeframe = "5m"

initial_balance = 10
leverage = 10
target_profit = 0.2  # USDT
fee_rate = 0.0006

results = []
consecutive_losses = 0
max_consecutive_losses = 0

for symbol in symbols:
    print(f"üöÄ Ê≠£Âú®ÂàÜÊûêÔºö{symbol}")

    klines = fetch_klines(symbol, START_DATE, END_DATE, timeframe)
    if klines.empty:
        print(f"[Ë∑≥Ëøá] Êó†Ê≥ïËé∑Âèñ {symbol} ÁöÑKÁ∫øÊï∞ÊçÆ")
        continue

    for i in range(50, len(klines)-1):
        kline = klines.iloc[:i+1]  # Êà™ÂèñÂà∞ÂΩìÂâç
        signal = get_trade_signal(kline)

        if signal["direction"] == "neutral":
            continue  # ‰∏çÂÅöËßÇÊúõÂçï

        entry_price = kline.iloc[-1]["close"]
        atr = calculate_atr(kline)

        if atr == 0 or pd.isna(atr):
            continue

        direction = signal["direction"]
        take_profit = entry_price + 1.5 * atr if direction == "long" else entry_price - 1.5 * atr
        stop_loss = entry_price - 1 * atr if direction == "long" else entry_price + 1 * atr

        trade_outcome = None
        exit_price = None
        outcome_time = None

        for j in range(i+1, len(klines)):
            next_price = klines.iloc[j]["close"]
            if direction == "long":
                if next_price >= take_profit:
                    trade_outcome = "win"
                    exit_price = take_profit
                    outcome_time = klines.iloc[j]["timestamp"]
                    break
                elif next_price <= stop_loss:
                    trade_outcome = "loss"
                    exit_price = stop_loss
                    outcome_time = klines.iloc[j]["timestamp"]
                    break
            else:
                if next_price <= take_profit:
                    trade_outcome = "win"
                    exit_price = take_profit
                    outcome_time = klines.iloc[j]["timestamp"]
                    break
                elif next_price >= stop_loss:
                    trade_outcome = "loss"
                    exit_price = stop_loss
                    outcome_time = klines.iloc[j]["timestamp"]
                    break

        if trade_outcome is None:
            continue

        pnl = ((exit_price - entry_price) / entry_price) * leverage * initial_balance
        if direction == "short":
            pnl *= -1

        pnl = apply_fees(pnl, initial_balance, fee_rate)
        result = {
            "Êó∂Èó¥": kline.iloc[-1]["timestamp"],
            "Â∏ÅÁßç": symbol,
            "ÊñπÂêë": "ÂÅöÂ§ö" if direction == "long" else "ÂÅöÁ©∫",
            "ÂºÄ‰ªì‰ª∑": round(entry_price, 6),
            "Âπ≥‰ªì‰ª∑": round(exit_price, 6),
            "Áõà‰∫è": round(pnl, 3),
            "ÁªìÊûú": trade_outcome,
            "ÁªìÊùüÊó∂Èó¥": outcome_time
        }
        results.append(result)

        # ËøûÁª≠‰∫èÊçüÁªüËÆ°
        if pnl >= target_profit:
            consecutive_losses = 0
        else:
            consecutive_losses += 1
            if consecutive_losses > max_consecutive_losses:
                max_consecutive_losses = consecutive_losses

print("‚úÖ ÂõûÊµãÂÆåÊàêÔºåÊ≠£Âú®ÁªüËÆ°ÁªìÊûú...")

df = pd.DataFrame(results)
if not df.empty:
    total_trades = len(df)
    wins = df[df["Áõà‰∫è"] >= target_profit]
    losses = df[df["Áõà‰∫è"] < target_profit]

    print(f"ÊÄª‰∫§ÊòìÊ¨°Êï∞Ôºö{total_trades}")
    print(f"ÁõàÂà©Ê¨°Êï∞Ôºö{len(wins)}")
    print(f"‰∫èÊçüÊ¨°Êï∞Ôºö{len(losses)}")
    print(f"ËÉúÁéáÔºö{round(len(wins)/total_trades*100, 2)}%")
    print(f"Âπ≥ÂùáÁõàÂà©Ôºö{round(wins['Áõà‰∫è'].mean(), 3) if not wins.empty else 0}")
    print(f"Âπ≥Âùá‰∫èÊçüÔºö{round(losses['Áõà‰∫è'].mean(), 3) if not losses.empty else 0}")
    print(f"ÊúÄÂ§ßËøûÁª≠‰∫èÊçüÊ¨°Êï∞Ôºö{max_consecutive_losses}")
    print(f"ÊúÄÂ§ßÂçïÁ¨îÁõàÂà©Ôºö{round(df['Áõà‰∫è'].max(), 3)}")
    print(f"ÊúÄÂ§ßÂçïÁ¨î‰∫èÊçüÔºö{round(df['Áõà‰∫è'].min(), 3)}")

    csv_filename = f"backtest_result_{START_DATE}_to_{END_DATE}.csv"
    df.to_csv(csv_filename, index=False, encoding="utf-8-sig")
    print(f"‚úÖ ÁªìÊûúÂ∑≤‰øùÂ≠ò‰∏∫ {csv_filename}")
else:
    print("Ê≤°ÊúâÁ¨¶ÂêàÊù°‰ª∂ÁöÑ‰∫§Êòì„ÄÇ")
